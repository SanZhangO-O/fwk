// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: base.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_base_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_base_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021012 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_bases.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_base_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_base_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_base_2eproto;
namespace base {
class Confirm;
struct ConfirmDefaultTypeInternal;
extern ConfirmDefaultTypeInternal _Confirm_default_instance_;
class ConnectionEstablishCfm;
struct ConnectionEstablishCfmDefaultTypeInternal;
extern ConnectionEstablishCfmDefaultTypeInternal _ConnectionEstablishCfm_default_instance_;
class ConnectionEstablishRej;
struct ConnectionEstablishRejDefaultTypeInternal;
extern ConnectionEstablishRejDefaultTypeInternal _ConnectionEstablishRej_default_instance_;
class ConnectionEstablishReq;
struct ConnectionEstablishReqDefaultTypeInternal;
extern ConnectionEstablishReqDefaultTypeInternal _ConnectionEstablishReq_default_instance_;
class Request;
struct RequestDefaultTypeInternal;
extern RequestDefaultTypeInternal _Request_default_instance_;
}  // namespace base
PROTOBUF_NAMESPACE_OPEN
template<> ::base::Confirm* Arena::CreateMaybeMessage<::base::Confirm>(Arena*);
template<> ::base::ConnectionEstablishCfm* Arena::CreateMaybeMessage<::base::ConnectionEstablishCfm>(Arena*);
template<> ::base::ConnectionEstablishRej* Arena::CreateMaybeMessage<::base::ConnectionEstablishRej>(Arena*);
template<> ::base::ConnectionEstablishReq* Arena::CreateMaybeMessage<::base::ConnectionEstablishReq>(Arena*);
template<> ::base::Request* Arena::CreateMaybeMessage<::base::Request>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace base {

// ===================================================================

class ConnectionEstablishReq final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:base.ConnectionEstablishReq) */ {
 public:
  inline ConnectionEstablishReq() : ConnectionEstablishReq(nullptr) {}
  ~ConnectionEstablishReq() override;
  explicit PROTOBUF_CONSTEXPR ConnectionEstablishReq(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ConnectionEstablishReq(const ConnectionEstablishReq& from);
  ConnectionEstablishReq(ConnectionEstablishReq&& from) noexcept
    : ConnectionEstablishReq() {
    *this = ::std::move(from);
  }

  inline ConnectionEstablishReq& operator=(const ConnectionEstablishReq& from) {
    CopyFrom(from);
    return *this;
  }
  inline ConnectionEstablishReq& operator=(ConnectionEstablishReq&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ConnectionEstablishReq& default_instance() {
    return *internal_default_instance();
  }
  static inline const ConnectionEstablishReq* internal_default_instance() {
    return reinterpret_cast<const ConnectionEstablishReq*>(
               &_ConnectionEstablishReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(ConnectionEstablishReq& a, ConnectionEstablishReq& b) {
    a.Swap(&b);
  }
  inline void Swap(ConnectionEstablishReq* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ConnectionEstablishReq* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ConnectionEstablishReq* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ConnectionEstablishReq>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ConnectionEstablishReq& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ConnectionEstablishReq& from) {
    ConnectionEstablishReq::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ConnectionEstablishReq* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "base.ConnectionEstablishReq";
  }
  protected:
  explicit ConnectionEstablishReq(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kVersionFieldNumber = 1,
  };
  // int32 version = 1;
  void clear_version();
  int32_t version() const;
  void set_version(int32_t value);
  private:
  int32_t _internal_version() const;
  void _internal_set_version(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:base.ConnectionEstablishReq)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    int32_t version_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_base_2eproto;
};
// -------------------------------------------------------------------

class ConnectionEstablishCfm final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:base.ConnectionEstablishCfm) */ {
 public:
  inline ConnectionEstablishCfm() : ConnectionEstablishCfm(nullptr) {}
  explicit PROTOBUF_CONSTEXPR ConnectionEstablishCfm(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ConnectionEstablishCfm(const ConnectionEstablishCfm& from);
  ConnectionEstablishCfm(ConnectionEstablishCfm&& from) noexcept
    : ConnectionEstablishCfm() {
    *this = ::std::move(from);
  }

  inline ConnectionEstablishCfm& operator=(const ConnectionEstablishCfm& from) {
    CopyFrom(from);
    return *this;
  }
  inline ConnectionEstablishCfm& operator=(ConnectionEstablishCfm&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ConnectionEstablishCfm& default_instance() {
    return *internal_default_instance();
  }
  static inline const ConnectionEstablishCfm* internal_default_instance() {
    return reinterpret_cast<const ConnectionEstablishCfm*>(
               &_ConnectionEstablishCfm_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(ConnectionEstablishCfm& a, ConnectionEstablishCfm& b) {
    a.Swap(&b);
  }
  inline void Swap(ConnectionEstablishCfm* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ConnectionEstablishCfm* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ConnectionEstablishCfm* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ConnectionEstablishCfm>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const ConnectionEstablishCfm& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(*this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const ConnectionEstablishCfm& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(*this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "base.ConnectionEstablishCfm";
  }
  protected:
  explicit ConnectionEstablishCfm(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:base.ConnectionEstablishCfm)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
  };
  friend struct ::TableStruct_base_2eproto;
};
// -------------------------------------------------------------------

class ConnectionEstablishRej final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:base.ConnectionEstablishRej) */ {
 public:
  inline ConnectionEstablishRej() : ConnectionEstablishRej(nullptr) {}
  ~ConnectionEstablishRej() override;
  explicit PROTOBUF_CONSTEXPR ConnectionEstablishRej(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ConnectionEstablishRej(const ConnectionEstablishRej& from);
  ConnectionEstablishRej(ConnectionEstablishRej&& from) noexcept
    : ConnectionEstablishRej() {
    *this = ::std::move(from);
  }

  inline ConnectionEstablishRej& operator=(const ConnectionEstablishRej& from) {
    CopyFrom(from);
    return *this;
  }
  inline ConnectionEstablishRej& operator=(ConnectionEstablishRej&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ConnectionEstablishRej& default_instance() {
    return *internal_default_instance();
  }
  static inline const ConnectionEstablishRej* internal_default_instance() {
    return reinterpret_cast<const ConnectionEstablishRej*>(
               &_ConnectionEstablishRej_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(ConnectionEstablishRej& a, ConnectionEstablishRej& b) {
    a.Swap(&b);
  }
  inline void Swap(ConnectionEstablishRej* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ConnectionEstablishRej* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ConnectionEstablishRej* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ConnectionEstablishRej>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ConnectionEstablishRej& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ConnectionEstablishRej& from) {
    ConnectionEstablishRej::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ConnectionEstablishRej* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "base.ConnectionEstablishRej";
  }
  protected:
  explicit ConnectionEstablishRej(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kErrorNoFieldNumber = 1,
  };
  // int32 error_no = 1;
  void clear_error_no();
  int32_t error_no() const;
  void set_error_no(int32_t value);
  private:
  int32_t _internal_error_no() const;
  void _internal_set_error_no(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:base.ConnectionEstablishRej)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    int32_t error_no_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_base_2eproto;
};
// -------------------------------------------------------------------

class Request final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:base.Request) */ {
 public:
  inline Request() : Request(nullptr) {}
  ~Request() override;
  explicit PROTOBUF_CONSTEXPR Request(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Request(const Request& from);
  Request(Request&& from) noexcept
    : Request() {
    *this = ::std::move(from);
  }

  inline Request& operator=(const Request& from) {
    CopyFrom(from);
    return *this;
  }
  inline Request& operator=(Request&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Request& default_instance() {
    return *internal_default_instance();
  }
  static inline const Request* internal_default_instance() {
    return reinterpret_cast<const Request*>(
               &_Request_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(Request& a, Request& b) {
    a.Swap(&b);
  }
  inline void Swap(Request* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Request* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Request* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Request>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Request& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Request& from) {
    Request::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Request* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "base.Request";
  }
  protected:
  explicit Request(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kParameterFieldNumber = 4,
    kNameFieldNumber = 3,
    kProcedureIdFieldNumber = 1,
    kNeedConfirmFieldNumber = 2,
  };
  // repeated string parameter = 4;
  int parameter_size() const;
  private:
  int _internal_parameter_size() const;
  public:
  void clear_parameter();
  const std::string& parameter(int index) const;
  std::string* mutable_parameter(int index);
  void set_parameter(int index, const std::string& value);
  void set_parameter(int index, std::string&& value);
  void set_parameter(int index, const char* value);
  void set_parameter(int index, const char* value, size_t size);
  std::string* add_parameter();
  void add_parameter(const std::string& value);
  void add_parameter(std::string&& value);
  void add_parameter(const char* value);
  void add_parameter(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& parameter() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_parameter();
  private:
  const std::string& _internal_parameter(int index) const;
  std::string* _internal_add_parameter();
  public:

  // string name = 3;
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // int32 procedure_id = 1;
  void clear_procedure_id();
  int32_t procedure_id() const;
  void set_procedure_id(int32_t value);
  private:
  int32_t _internal_procedure_id() const;
  void _internal_set_procedure_id(int32_t value);
  public:

  // bool need_confirm = 2;
  void clear_need_confirm();
  bool need_confirm() const;
  void set_need_confirm(bool value);
  private:
  bool _internal_need_confirm() const;
  void _internal_set_need_confirm(bool value);
  public:

  // @@protoc_insertion_point(class_scope:base.Request)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> parameter_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
    int32_t procedure_id_;
    bool need_confirm_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_base_2eproto;
};
// -------------------------------------------------------------------

class Confirm final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:base.Confirm) */ {
 public:
  inline Confirm() : Confirm(nullptr) {}
  ~Confirm() override;
  explicit PROTOBUF_CONSTEXPR Confirm(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Confirm(const Confirm& from);
  Confirm(Confirm&& from) noexcept
    : Confirm() {
    *this = ::std::move(from);
  }

  inline Confirm& operator=(const Confirm& from) {
    CopyFrom(from);
    return *this;
  }
  inline Confirm& operator=(Confirm&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Confirm& default_instance() {
    return *internal_default_instance();
  }
  static inline const Confirm* internal_default_instance() {
    return reinterpret_cast<const Confirm*>(
               &_Confirm_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(Confirm& a, Confirm& b) {
    a.Swap(&b);
  }
  inline void Swap(Confirm* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Confirm* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Confirm* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Confirm>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Confirm& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Confirm& from) {
    Confirm::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Confirm* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "base.Confirm";
  }
  protected:
  explicit Confirm(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kResultFieldNumber = 2,
    kProcedureIdFieldNumber = 1,
  };
  // string result = 2;
  void clear_result();
  const std::string& result() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_result(ArgT0&& arg0, ArgT... args);
  std::string* mutable_result();
  PROTOBUF_NODISCARD std::string* release_result();
  void set_allocated_result(std::string* result);
  private:
  const std::string& _internal_result() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_result(const std::string& value);
  std::string* _internal_mutable_result();
  public:

  // int32 procedure_id = 1;
  void clear_procedure_id();
  int32_t procedure_id() const;
  void set_procedure_id(int32_t value);
  private:
  int32_t _internal_procedure_id() const;
  void _internal_set_procedure_id(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:base.Confirm)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr result_;
    int32_t procedure_id_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_base_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// ConnectionEstablishReq

// int32 version = 1;
inline void ConnectionEstablishReq::clear_version() {
  _impl_.version_ = 0;
}
inline int32_t ConnectionEstablishReq::_internal_version() const {
  return _impl_.version_;
}
inline int32_t ConnectionEstablishReq::version() const {
  // @@protoc_insertion_point(field_get:base.ConnectionEstablishReq.version)
  return _internal_version();
}
inline void ConnectionEstablishReq::_internal_set_version(int32_t value) {
  
  _impl_.version_ = value;
}
inline void ConnectionEstablishReq::set_version(int32_t value) {
  _internal_set_version(value);
  // @@protoc_insertion_point(field_set:base.ConnectionEstablishReq.version)
}

// -------------------------------------------------------------------

// ConnectionEstablishCfm

// -------------------------------------------------------------------

// ConnectionEstablishRej

// int32 error_no = 1;
inline void ConnectionEstablishRej::clear_error_no() {
  _impl_.error_no_ = 0;
}
inline int32_t ConnectionEstablishRej::_internal_error_no() const {
  return _impl_.error_no_;
}
inline int32_t ConnectionEstablishRej::error_no() const {
  // @@protoc_insertion_point(field_get:base.ConnectionEstablishRej.error_no)
  return _internal_error_no();
}
inline void ConnectionEstablishRej::_internal_set_error_no(int32_t value) {
  
  _impl_.error_no_ = value;
}
inline void ConnectionEstablishRej::set_error_no(int32_t value) {
  _internal_set_error_no(value);
  // @@protoc_insertion_point(field_set:base.ConnectionEstablishRej.error_no)
}

// -------------------------------------------------------------------

// Request

// int32 procedure_id = 1;
inline void Request::clear_procedure_id() {
  _impl_.procedure_id_ = 0;
}
inline int32_t Request::_internal_procedure_id() const {
  return _impl_.procedure_id_;
}
inline int32_t Request::procedure_id() const {
  // @@protoc_insertion_point(field_get:base.Request.procedure_id)
  return _internal_procedure_id();
}
inline void Request::_internal_set_procedure_id(int32_t value) {
  
  _impl_.procedure_id_ = value;
}
inline void Request::set_procedure_id(int32_t value) {
  _internal_set_procedure_id(value);
  // @@protoc_insertion_point(field_set:base.Request.procedure_id)
}

// bool need_confirm = 2;
inline void Request::clear_need_confirm() {
  _impl_.need_confirm_ = false;
}
inline bool Request::_internal_need_confirm() const {
  return _impl_.need_confirm_;
}
inline bool Request::need_confirm() const {
  // @@protoc_insertion_point(field_get:base.Request.need_confirm)
  return _internal_need_confirm();
}
inline void Request::_internal_set_need_confirm(bool value) {
  
  _impl_.need_confirm_ = value;
}
inline void Request::set_need_confirm(bool value) {
  _internal_set_need_confirm(value);
  // @@protoc_insertion_point(field_set:base.Request.need_confirm)
}

// string name = 3;
inline void Request::clear_name() {
  _impl_.name_.ClearToEmpty();
}
inline const std::string& Request::name() const {
  // @@protoc_insertion_point(field_get:base.Request.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Request::set_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:base.Request.name)
}
inline std::string* Request::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:base.Request.name)
  return _s;
}
inline const std::string& Request::_internal_name() const {
  return _impl_.name_.Get();
}
inline void Request::_internal_set_name(const std::string& value) {
  
  _impl_.name_.Set(value, GetArenaForAllocation());
}
inline std::string* Request::_internal_mutable_name() {
  
  return _impl_.name_.Mutable(GetArenaForAllocation());
}
inline std::string* Request::release_name() {
  // @@protoc_insertion_point(field_release:base.Request.name)
  return _impl_.name_.Release();
}
inline void Request::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  _impl_.name_.SetAllocated(name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:base.Request.name)
}

// repeated string parameter = 4;
inline int Request::_internal_parameter_size() const {
  return _impl_.parameter_.size();
}
inline int Request::parameter_size() const {
  return _internal_parameter_size();
}
inline void Request::clear_parameter() {
  _impl_.parameter_.Clear();
}
inline std::string* Request::add_parameter() {
  std::string* _s = _internal_add_parameter();
  // @@protoc_insertion_point(field_add_mutable:base.Request.parameter)
  return _s;
}
inline const std::string& Request::_internal_parameter(int index) const {
  return _impl_.parameter_.Get(index);
}
inline const std::string& Request::parameter(int index) const {
  // @@protoc_insertion_point(field_get:base.Request.parameter)
  return _internal_parameter(index);
}
inline std::string* Request::mutable_parameter(int index) {
  // @@protoc_insertion_point(field_mutable:base.Request.parameter)
  return _impl_.parameter_.Mutable(index);
}
inline void Request::set_parameter(int index, const std::string& value) {
  _impl_.parameter_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:base.Request.parameter)
}
inline void Request::set_parameter(int index, std::string&& value) {
  _impl_.parameter_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:base.Request.parameter)
}
inline void Request::set_parameter(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.parameter_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:base.Request.parameter)
}
inline void Request::set_parameter(int index, const char* value, size_t size) {
  _impl_.parameter_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:base.Request.parameter)
}
inline std::string* Request::_internal_add_parameter() {
  return _impl_.parameter_.Add();
}
inline void Request::add_parameter(const std::string& value) {
  _impl_.parameter_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:base.Request.parameter)
}
inline void Request::add_parameter(std::string&& value) {
  _impl_.parameter_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:base.Request.parameter)
}
inline void Request::add_parameter(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.parameter_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:base.Request.parameter)
}
inline void Request::add_parameter(const char* value, size_t size) {
  _impl_.parameter_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:base.Request.parameter)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
Request::parameter() const {
  // @@protoc_insertion_point(field_list:base.Request.parameter)
  return _impl_.parameter_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
Request::mutable_parameter() {
  // @@protoc_insertion_point(field_mutable_list:base.Request.parameter)
  return &_impl_.parameter_;
}

// -------------------------------------------------------------------

// Confirm

// int32 procedure_id = 1;
inline void Confirm::clear_procedure_id() {
  _impl_.procedure_id_ = 0;
}
inline int32_t Confirm::_internal_procedure_id() const {
  return _impl_.procedure_id_;
}
inline int32_t Confirm::procedure_id() const {
  // @@protoc_insertion_point(field_get:base.Confirm.procedure_id)
  return _internal_procedure_id();
}
inline void Confirm::_internal_set_procedure_id(int32_t value) {
  
  _impl_.procedure_id_ = value;
}
inline void Confirm::set_procedure_id(int32_t value) {
  _internal_set_procedure_id(value);
  // @@protoc_insertion_point(field_set:base.Confirm.procedure_id)
}

// string result = 2;
inline void Confirm::clear_result() {
  _impl_.result_.ClearToEmpty();
}
inline const std::string& Confirm::result() const {
  // @@protoc_insertion_point(field_get:base.Confirm.result)
  return _internal_result();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Confirm::set_result(ArgT0&& arg0, ArgT... args) {
 
 _impl_.result_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:base.Confirm.result)
}
inline std::string* Confirm::mutable_result() {
  std::string* _s = _internal_mutable_result();
  // @@protoc_insertion_point(field_mutable:base.Confirm.result)
  return _s;
}
inline const std::string& Confirm::_internal_result() const {
  return _impl_.result_.Get();
}
inline void Confirm::_internal_set_result(const std::string& value) {
  
  _impl_.result_.Set(value, GetArenaForAllocation());
}
inline std::string* Confirm::_internal_mutable_result() {
  
  return _impl_.result_.Mutable(GetArenaForAllocation());
}
inline std::string* Confirm::release_result() {
  // @@protoc_insertion_point(field_release:base.Confirm.result)
  return _impl_.result_.Release();
}
inline void Confirm::set_allocated_result(std::string* result) {
  if (result != nullptr) {
    
  } else {
    
  }
  _impl_.result_.SetAllocated(result, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.result_.IsDefault()) {
    _impl_.result_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:base.Confirm.result)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace base

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_base_2eproto
